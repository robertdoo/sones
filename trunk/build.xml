<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     07 Μαρ 2011 2:38:40 μ.μ.                                                        

     Sones    
     
                   
     Sartios                                                                
     ====================================================================== -->
<project name="sones" default="run" basedir=".">

	<!-- Project directories -->
	
	<property name="src.dir" value="src"/>
	<property name="lib.dir" value="lib"/>
	<property name="build.dir" value="build"/>
	<property name="config.dir" value="config"/>
	<property name="resources.dir" value="resources"/>
	<property name="deploy.dir" value="deploy"/>
	<property name="test.dir" value="test"/>
	<property name="dist.dir" value="dist"/>
	<property name="jar.name" value="sones.jar"/>
	<property name="main.class" value="MainLoader.main"/>
	<property name="hibernate.properties" value="${resources.dir}/hibernate.properties"/>
	<property name="sql.database.schema" value="createSchema.sql"/>




	
	<!-- Temporary project directories -->
	<property name="build.classes" value="${build.dir}/classes"/>
	<property name="build.tests" value="${build.dir}/tests"/>
	<property name="build.lib" value="${build.dir}/lib"/>
	
	<!-- Classpath definitions -->
	
	<path id="lib.classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<path id="dist.lib.classpath">
		<fileset dir="${build.lib}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<path id="runtime.classpath">
		<path refid="lib.classpath"/>
		<pathelement location="${build.classes}"/>
		<pathelement location="${src.dir}"/>
		<pathelement location="${config.dir}"/>
	</path>
	
	<!-- Compiler options -->
	<property name="javac.debug" value="on"/>
	<property name="build.compiler" value="modern"/>

	<!-- Hibernate tools task. It needs hibernate-tool.jar -->	
	<taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask">
		<classpath refid="runtime.classpath"/>
	</taskdef>
	
	
	
	<!-- ================================= 
          target: initialize              
         ================================= -->
    <target name="initialize" description="Create project's directories">
        <mkdir dir="${build.dir}"/>
    	<mkdir dir="${build.classes}"/>
    	<mkdir dir="${build.lib}"/>
    	<mkdir dir="${build.tests}"/>
    	
    	<copy todir="${build.lib}">
    		<fileset dir="${lib.dir}"/>
    	</copy>
    	
    	<mkdir dir="${dist.dir}"/>
    	<mkdir dir="${dist.dir}/bin"/>
    	<mkdir dir="${dist.dir}/lib"/>
    	
    </target>
	
	<!-- ================================= 
          target: clean              
         ================================= -->
    <target name="clean" description="Deletes project's temporary folders.">
        <delete verbose="false">
        	<fileset dir="${build.dir}"/>        	
        	<fileset dir="${dist.dir}"/>
        </delete>
    </target>
	
	<!-- ================================= 
          target: compile              
         ================================= -->
    <target name="compile" depends="initialize" description="Compiles application's classes">
        <javac srcdir="${src.dir}" destdir="${build.classes}" debug="${javac.debug}" deprecation="on">
        	<classpath refid="lib.classpath"/>
        </javac>
    </target>

	<!-- ================================= 
          target: create-package              
         ================================= -->
    <target name="create-package" depends="compile" description="Creates the jar file">
        <manifestclasspath property="jar.classpath" jarfile="${build.lib}/${jar.name}">
        	<classpath refid="lib.classpath"/>
        </manifestclasspath>
    	
    	<jar destfile="${jar.name}" basedir="${build.classes}">
    		<manifest>
    			<attribute name="Main-Class" value="${main.class}"/>
    			<attribute name="Class-Path" value="${jar.classpath}"/>
    		</manifest>
    	</jar>
    </target>
	
	<!-- ================================= 
	          target: deploy              
	         ================================= -->
	    <target name="deploy" depends="create-package" description="Deploy the application in a ready-to-run state">
	        <copy todir="${dist.dir}/lib">
	        	<fileset dir="${lib.dir}" includes="*.jar"/>
	        </copy>
	    	<copy todir="${dist.dir}/bin" >
	    		<fileset dir="${build.dir}" includes="${jar.name}"/>
	    	</copy>
	    </target>


    <!-- ================================= 
          target: run              
         ================================= -->
    <target name="run" depends="deploy" description="Run the application">
    	<java classname="com.sones.MainLoader">
    		<classpath refid="runtime.classpath"/>
    		</java>
        <echo>If you see this, it works</echo>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: database-init                      
         - - - - - - - - - - - - - - - - - -->
    <target name="database-init">
            <property file="${hibernate.properties}"/>
    </target>

    <!-- ================================= 
          target: create-database              
         ================================= -->
	<target name="create-database" depends="database-init" description="Creates the database, even if exists."> 
		<sql driver="${hibernate.connection.driver_class}" password="${hibernate.connection.password}"
			url="${hibernate.connection.url}" userid="${hibernate.connection.username}">
			<classpath refid="lib.classpath"/>
	
			drop database if exists ${jdbc.schema};
			create database ${jdbc.schema} charset "UTF8";
			
		</sql>
	</target>
	
	<!-- ================================= 
          target: create-schema-script              
         ================================= -->
    <target name="create-schema-script" depends="initialize,compile" description="Generates the sql script for creating tables">
        <mkdir dir="${deploy.dir}"/>
    	<hibernatetool destdir="${deploy.dir}">
    		<annotationconfiguration configurationfile="${resources.dir}/hibernate.cfg.xml">
    		</annotationconfiguration>
    		<hbm2ddl drop="false" export="false" create="true" outputfilename="${sql.database.schema}" haltonerror="true" format="true" delimiter=";"/>
    	</hibernatetool>
    </target>


	<!-- ================================= 
          target: create-database-schema              
         ================================= -->
    <target name="create-database-schema" depends="create-schema-script,database-init" description="Creates database tables">
        <sql driver="${hibernate.connection.driver_class}" password="${hibernate.connection.password}" url="${hibernate.connection.url}${jdbc.schema}"
        	userid="${hibernate.connection.username}" src="${deploy.dir}/${sql.database.schema}" >
        	<classpath refid="runtime.classpath"/>
        </sql>
    </target>


</project>
